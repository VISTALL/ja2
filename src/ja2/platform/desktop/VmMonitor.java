/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ja2.platform.desktop;

import ja2.VmDebugger;
import ja2.member.MethodCallInfo;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import static java.lang.Integer.parseInt;
import java.util.Arrays;
import java.util.Deque;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import ja2.clazz.BadClassFileException;
import ja2.Initialization;
import ja2.member.MethodAccessFlag;
import ja2.member.MethodInfo;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Attila
 */
public class VmMonitor extends javax.swing.JFrame implements VmDebugger {

    private StringBuilder buffer = new StringBuilder(100000);
    private boolean bufferChanged;
    private Map<Integer, List<Object>> operandStacksByStatement = new HashMap<>();
    private Map<Integer, Object[]> localVariablesByStatement = new HashMap<>();
    private Map<MethodCallInfo, DefaultMutableTreeNode> methodCallsByInfo = new HashMap<>();
    private Map<DefaultMutableTreeNode, MethodCallInfo> methodCallsByNode = new HashMap<>();

    /**
     * Creates new form VmMonitor
     */
    public VmMonitor() {
        initComponents();
        new Timer(50, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (bufferChanged) {
                    if (buffer != null)
                        jTextPane1.setText(buffer.toString());
                    bufferChanged = false;
                }
            }
        }).start();
        System.setOut(new PrintStream(new OutputStream() {
            @Override
            public void write(final int b) throws IOException {
                buffer.append((char) b);
                bufferChanged = true;
            }
        }));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        debuggerPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        brpClassTextField = new javax.swing.JTextField();
        brpMethodNameField = new javax.swing.JTextField();
        brpMethodDescriptorField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        statementsList = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        operandStackList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        localVariablesList = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ja2 - VmMonitor");

        jSplitPane1.setDividerLocation(330);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Method calls");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane7);

        jTextPane1.setEditable(false);
        jScrollPane3.setViewportView(jTextPane1);

        jTabbedPane1.addTab("VM log", jScrollPane3);

        jTextPane2.setEditable(false);
        jScrollPane2.setViewportView(jTextPane2);

        jTabbedPane1.addTab("Method log", jScrollPane2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Breakpoint"));

        jLabel1.setText("Class: ");

        jLabel2.setText("Method name: ");

        jLabel3.setText("Method descriptor: ");

        brpClassTextField.setText("java/lang/String");
        brpClassTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brpClassTextFieldActionPerformed(evt);
            }
        });

        brpMethodNameField.setText("equals");
        brpMethodNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brpMethodNameFieldActionPerformed(evt);
            }
        });

        brpMethodDescriptorField.setText("(Ljava/lang/Object;)Z");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(brpClassTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(brpMethodNameField)
                    .addComponent(brpMethodDescriptorField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(brpClassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(brpMethodNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(brpMethodDescriptorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Statements"));

        statementsList.setModel(new DefaultListModel<>());
        statementsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                statementsListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(statementsList);

        operandStackList.setBorder(javax.swing.BorderFactory.createTitledBorder("Operand stack"));
        jScrollPane5.setViewportView(operandStackList);

        localVariablesList.setBorder(javax.swing.BorderFactory.createTitledBorder("Local variables"));
        jScrollPane6.setViewportView(localVariablesList);

        javax.swing.GroupLayout debuggerPanelLayout = new javax.swing.GroupLayout(debuggerPanel);
        debuggerPanel.setLayout(debuggerPanelLayout);
        debuggerPanelLayout.setHorizontalGroup(
            debuggerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(debuggerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(debuggerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(debuggerPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addContainerGap())
        );
        debuggerPanelLayout.setVerticalGroup(
            debuggerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(debuggerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(debuggerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(debuggerPanelLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(debuggerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Debugger", debuggerPanel);

        jSplitPane1.setRightComponent(jTabbedPane1);

        jButton2.setText("Expand call hierarchy");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Run VM");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton1.setText("Dump");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jToggleButton1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void statementsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_statementsListValueChanged
        String selectedStatementInfo = statementsList.getSelectedValue().toString();
        int pc = parseInt(selectedStatementInfo.substring(0, selectedStatementInfo.indexOf(": ")));

        Object[] localVariables = localVariablesByStatement.get(pc);
        List<Object> operandStack = operandStacksByStatement.get(pc);

        DefaultListModel lvlModel = new DefaultListModel();
        for (int i = 0; i < 16; i++)
            lvlModel.addElement(localVariables[i]);

        localVariablesList.setModel(lvlModel);
        DefaultListModel oslModel = new DefaultListModel();
        for (Object object : operandStack)
            oslModel.addElement(object);

        operandStackList.setModel(oslModel);
    }//GEN-LAST:event_statementsListValueChanged

    private void brpClassTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brpClassTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brpClassTextFieldActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        Object obj = jTree1.getLastSelectedPathComponent();
        if (obj == null) {
            jTextPane2.setText("Select a method call to view log.");
            return;
        }
        MethodCallInfo method = ((MethodCallInfo) (((DefaultMutableTreeNode) obj).getUserObject()));
        if (method.method.accessFlags.contains(MethodAccessFlag.NATIVE)) {
            jTextPane2.setText("NATIVE METHOD");
            return;
        }

        jTextPane2.setText(method.vmContext.getLog());
    }//GEN-LAST:event_jTree1ValueChanged

    private void brpMethodNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brpMethodNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brpMethodNameFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        for (int i = 0; i < jTree1.getRowCount(); i++)
            jTree1.expandRow(i);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        Initialization.enable = jToggleButton1.isSelected();
        if (jToggleButton1.isSelected()) {
            buffer = new StringBuilder();
            Initialization.setDebugger(this);
            new Thread(new Runnable() {
                @Override
                public void run() {
                    Initialization.main(new String[0]);
                }
            }).start();
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try (PrintWriter writer = new PrintWriter("dump.txt")) {
            for (int i = 1; i < jTree1.getRowCount(); i++) {
                MethodCallInfo mci = (MethodCallInfo) ((DefaultMutableTreeNode) jTree1.getPathForRow(i).getLastPathComponent()).getUserObject();
                writer.println("Begin method call: " + mci);
                if (mci.method.accessFlags.contains(MethodAccessFlag.NATIVE))
                    writer.println("[Native Method]");
                else
                    writer.print(mci.vmContext.getLog());
                writer.println("End method call: " + mci);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VmMonitor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VmMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VmMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VmMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VmMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VmMonitor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField brpClassTextField;
    private javax.swing.JTextField brpMethodDescriptorField;
    private javax.swing.JTextField brpMethodNameField;
    private javax.swing.JPanel debuggerPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTree jTree1;
    private javax.swing.JList localVariablesList;
    private javax.swing.JList operandStackList;
    private javax.swing.JList statementsList;
    // End of variables declaration//GEN-END:variables
    private boolean onDebuggingMethod = false;
    private boolean debuggingEnabled = false;

    @Override
    public void statementExecuted(final int pc, final List<String> description, final Deque<Object> operandStack, Object[] localVariables) {
        if (onDebuggingMethod) {
            final List<Object> operandStackClone = new LinkedList<>();
            operandStackClone.addAll(operandStack);
            final Object[] localVariablesClone = Arrays.copyOf(localVariables, localVariables.length);
            final StringBuilder buffer2 = new StringBuilder();
            for (String string : description)
                buffer2.append(string).append(' ');
            System.err.println(pc);
            System.err.println(buffer2.toString());
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    ((DefaultListModel) (statementsList.getModel())).addElement(buffer2.toString());
                    operandStacksByStatement.put(pc, operandStackClone);
                    localVariablesByStatement.put(pc, localVariablesClone);
                }
            });
        }
    }

    @Override
    public void methodInvoked(final MethodCallInfo methodCall) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                DefaultMutableTreeNode parent = methodCallsByInfo.get(methodCall.caller);
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(methodCall);
                methodCallsByInfo.put(methodCall, node);
                methodCallsByNode.put(node, methodCall);
                if (parent == null)
                    ((DefaultMutableTreeNode) jTree1.getModel().getRoot()).add(node);
                else
                    parent.add(node);
                jTree1.repaint();
            }
        });
        continuingMethod(methodCall.method);

    }

    @Override
    public void onError(final MethodCallInfo methodWhereErrorOccured) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                DefaultMutableTreeNode node = methodCallsByInfo.get(methodWhereErrorOccured);
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                jTree1.expandPath(new TreePath(parent.getPath()));
            }
        });
    }

    @Override
    public void continuingMethod(MethodInfo method) {
        if (!debuggingEnabled)
            return;
        if (method.name.equals(brpMethodNameField.getText())
                && method.descriptor.equals(brpMethodDescriptorField.getText())
                && method.clazz.name.equals(brpClassTextField.getText()))
            onDebuggingMethod = true;
        else
            onDebuggingMethod = false;
    }
}
